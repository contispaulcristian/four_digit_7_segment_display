
four_digit_7_segment_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbf  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000826  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  00002049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000799  00000000  00000000  00002d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000034a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_16>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	6b 01       	movw	r12, r22
  6a:	6f 01       	movw	r12, r30
  6c:	73 01       	movw	r14, r6
  6e:	77 01       	movw	r14, r14
  70:	7b 01       	movw	r14, r22
  72:	7f 01       	movw	r14, r30
  74:	83 01       	movw	r16, r6
  76:	87 01       	movw	r16, r14
  78:	8b 01       	movw	r16, r22
  7a:	8f 01       	movw	r16, r30

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include "segments.h"

int main(void){
	uint8_t s=0,m=0,h=0,zi=0;
/***************************************************************************************************************************************************/
	DDRD |= 0xC0;
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 6c       	ori	r24, 0xC0	; 192
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0xC0;
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 73       	andi	r24, 0x3F	; 63
  ae:	8b b9       	out	0x0b, r24	; 11
	DDRC |= 0x3F;
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	8f 63       	ori	r24, 0x3F	; 63
  b4:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~0x3F;
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	80 7c       	andi	r24, 0xC0	; 192
  ba:	88 b9       	out	0x08, r24	; 8
/***************************************************************************************************************************************************/
	DDRB |= 0xFF;
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0xFF;
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	85 b9       	out	0x05, r24	; 5
/***************************************************************************************************************************************************/
	sei();
  c6:	78 94       	sei
	timer_init();
  c8:	0e 94 b9 01 	call	0x372	; 0x372 <timer_init>
	while(1){
		if(Start_timer_ON){
  cc:	4c 9b       	sbis	0x09, 4	; 9
  ce:	7c c0       	rjmp	.+248    	; 0x1c8 <main+0x124>
			s=0;m=0;h=0;zi=0;
			while(Start_timer_OF != TRUE){
  d0:	4c 99       	sbic	0x09, 4	; 9
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <main+0x44>
  d4:	fb cf       	rjmp	.-10     	; 0xcc <main+0x28>
				if(s>9){s=0;m++;}
  d6:	ca 30       	cpi	r28, 0x0A	; 10
  d8:	10 f0       	brcs	.+4      	; 0xde <main+0x3a>
  da:	1f 5f       	subi	r17, 0xFF	; 255
  dc:	c0 e0       	ldi	r28, 0x00	; 0
				if(m>9){m=0;h++;}
  de:	1a 30       	cpi	r17, 0x0A	; 10
  e0:	38 f0       	brcs	.+14     	; 0xf0 <main+0x4c>
  e2:	df 5f       	subi	r29, 0xFF	; 255
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <main+0x4c>
	sei();
	timer_init();
	while(1){
		if(Start_timer_ON){
			s=0;m=0;h=0;zi=0;
			while(Start_timer_OF != TRUE){
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
				if(s>9){s=0;m++;}
				if(m>9){m=0;h++;}
				if(h>9){h=0;zi++;}
  f0:	da 30       	cpi	r29, 0x0A	; 10
  f2:	10 f0       	brcs	.+4      	; 0xf8 <main+0x54>
  f4:	0f 5f       	subi	r16, 0xFF	; 255
  f6:	d0 e0       	ldi	r29, 0x00	; 0
				if(zi>9){h=0;}
  f8:	0a 30       	cpi	r16, 0x0A	; 10
  fa:	08 f4       	brcc	.+2      	; 0xfe <main+0x5a>
  fc:	56 c0       	rjmp	.+172    	; 0x1aa <main+0x106>
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	54 c0       	rjmp	.+168    	; 0x1aa <main+0x106>
				while((timer_timeout(1) == 0)){set_digit(0);_delay_ms(1);set_digit(1);set_character(s);_delay_ms(1);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f e9       	ldi	r24, 0x9F	; 159
 10a:	9f e0       	ldi	r25, 0x0F	; 15
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x68>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x6e>
 112:	00 00       	nop
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x80>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x86>
 12a:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(2);set_character(m);_delay_ms(1);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x92>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x98>
 13c:	00 00       	nop
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 144:	81 2f       	mov	r24, r17
 146:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xaa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xb0>
 154:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(3);set_character(h);_delay_ms(1);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xbc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xc2>
 166:	00 00       	nop
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 16e:	8d 2f       	mov	r24, r29
 170:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xd4>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xda>
 17e:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(4);set_character(zi);_delay_ms(1);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xe6>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xec>
 190:	00 00       	nop
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 198:	80 2f       	mov	r24, r16
 19a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 19e:	8f e9       	ldi	r24, 0x9F	; 159
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xfe>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x104>
 1a8:	00 00       	nop
			while(Start_timer_OF != TRUE){
				if(s>9){s=0;m++;}
				if(m>9){m=0;h++;}
				if(h>9){h=0;zi++;}
				if(zi>9){h=0;}
				while((timer_timeout(1) == 0)){set_digit(0);_delay_ms(1);set_digit(1);set_character(s);_delay_ms(1);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 10 02 	call	0x420	; 0x420 <timer_timeout>
 1b6:	88 23       	and	r24, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <main+0x118>
 1ba:	a3 cf       	rjmp	.-186    	; 0x102 <main+0x5e>
					set_digit(0);_delay_ms(1);set_digit(2);set_character(m);_delay_ms(1);
					set_digit(0);_delay_ms(1);set_digit(3);set_character(h);_delay_ms(1);
					set_digit(0);_delay_ms(1);set_digit(4);set_character(zi);_delay_ms(1);
				}timer_reset_tacts();
 1bc:	0e 94 07 02 	call	0x40e	; 0x40e <timer_reset_tacts>
				s+=1;
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
	sei();
	timer_init();
	while(1){
		if(Start_timer_ON){
			s=0;m=0;h=0;zi=0;
			while(Start_timer_OF != TRUE){
 1c2:	4c 99       	sbic	0x09, 4	; 9
 1c4:	88 cf       	rjmp	.-240    	; 0xd6 <main+0x32>
 1c6:	82 cf       	rjmp	.-252    	; 0xcc <main+0x28>
				}timer_reset_tacts();
				s+=1;
			}
		}
		else {
			set_digit(0);_delay_ms(1);set_digit(1);set_character(0);_delay_ms(1);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x12e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x134>
 1d8:	00 00       	nop
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 1e6:	8f e9       	ldi	r24, 0x9F	; 159
 1e8:	9f e0       	ldi	r25, 0x0F	; 15
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x146>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x14c>
 1f0:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(2);set_character(0);_delay_ms(1);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x158>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x15e>
 202:	00 00       	nop
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 210:	8f e9       	ldi	r24, 0x9F	; 159
 212:	9f e0       	ldi	r25, 0x0F	; 15
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x170>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x176>
 21a:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(3);set_character(0);_delay_ms(1);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x182>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x188>
 22c:	00 00       	nop
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 23a:	8f e9       	ldi	r24, 0x9F	; 159
 23c:	9f e0       	ldi	r25, 0x0F	; 15
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x19a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x1a0>
 244:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(4);set_character(0);_delay_ms(1);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x1ac>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x1b2>
 256:	00 00       	nop
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	0e 94 93 01 	call	0x326	; 0x326 <set_digit>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_character>
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x1c4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x1ca>
 26e:	00 00       	nop
 270:	2d cf       	rjmp	.-422    	; 0xcc <main+0x28>

00000272 <set_segment>:
#include "segments.h"

/***************************************************************************************************************************************************/
void set_segment(char x){
	/****Hexadecimal***********************************************************Binary****/
	if ((x & 0x01) == 0x01) SEGMENTS_1_PORT|=(1<<SEGMENT_ONE_BIT);            // 0000 0001                     
 272:	80 ff       	sbrs	r24, 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <set_segment+0x8>
 276:	40 9a       	sbi	0x08, 0	; 8
 278:	01 c0       	rjmp	.+2      	; 0x27c <set_segment+0xa>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_ONE_BIT);
 27a:	40 98       	cbi	0x08, 0	; 8
	if ((x & 0x02) == 0x02) SEGMENTS_1_PORT|=(1<<SEGMENT_TWO_BIT);            // 0000 0010
 27c:	81 ff       	sbrs	r24, 1
 27e:	02 c0       	rjmp	.+4      	; 0x284 <set_segment+0x12>
 280:	41 9a       	sbi	0x08, 1	; 8
 282:	01 c0       	rjmp	.+2      	; 0x286 <set_segment+0x14>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_TWO_BIT);
 284:	41 98       	cbi	0x08, 1	; 8
	if ((x & 0x04) == 0x04) SEGMENTS_1_PORT|=(1<<DOT_BIT);                    // 0000 0100
 286:	82 ff       	sbrs	r24, 2
 288:	02 c0       	rjmp	.+4      	; 0x28e <set_segment+0x1c>
 28a:	42 9a       	sbi	0x08, 2	; 8
 28c:	01 c0       	rjmp	.+2      	; 0x290 <set_segment+0x1e>
	else SEGMENTS_1_PORT&=~(1<<DOT_BIT);
 28e:	42 98       	cbi	0x08, 2	; 8
	if ((x & 0x08) == 0x08) SEGMENTS_1_PORT|=(1<<SEGMENT_FOUR_BIT);           // 0000 1000
 290:	83 ff       	sbrs	r24, 3
 292:	02 c0       	rjmp	.+4      	; 0x298 <set_segment+0x26>
 294:	43 9a       	sbi	0x08, 3	; 8
 296:	01 c0       	rjmp	.+2      	; 0x29a <set_segment+0x28>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_FOUR_BIT);
 298:	43 98       	cbi	0x08, 3	; 8
	if ((x & 0x10) == 0x10) SEGMENTS_1_PORT|=(1<<SEGMENT_FIVE_BIT);           // 0001 0000
 29a:	84 ff       	sbrs	r24, 4
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <set_segment+0x30>
 29e:	44 9a       	sbi	0x08, 4	; 8
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <set_segment+0x32>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_FIVE_BIT);
 2a2:	44 98       	cbi	0x08, 4	; 8
	if ((x & 0x20) == 0x20) SEGMENTS_1_PORT|=(1<<SEGMENT_SEVEN_BIT);          // 0010 0000
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <set_segment+0x3a>
 2a8:	45 9a       	sbi	0x08, 5	; 8
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <set_segment+0x3c>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_SEVEN_BIT);
 2ac:	45 98       	cbi	0x08, 5	; 8
	if ((x & 0x40) == 0x40) SEGMENTS_2_PORT|=(1<<SEGMENT_TEN_BIT);            // 0100 0000
 2ae:	86 ff       	sbrs	r24, 6
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <set_segment+0x44>
 2b2:	5e 9a       	sbi	0x0b, 6	; 11
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <set_segment+0x46>
	else SEGMENTS_2_PORT&=~(1<<SEGMENT_TEN_BIT);
 2b6:	5e 98       	cbi	0x0b, 6	; 11
	if ((x & 0x80) == 0x80) SEGMENTS_2_PORT|=(1<<SEGMENT_ELEVEN_BIT);         // 1000 0000
 2b8:	88 23       	and	r24, r24
 2ba:	14 f4       	brge	.+4      	; 0x2c0 <set_segment+0x4e>
 2bc:	5f 9a       	sbi	0x0b, 7	; 11
 2be:	08 95       	ret
    else SEGMENTS_2_PORT&=~(1<<SEGMENT_ELEVEN_BIT);}
 2c0:	5f 98       	cbi	0x0b, 7	; 11
 2c2:	08 95       	ret

000002c4 <set_character>:
/***************************************************************************************************************************************************/

void set_character(char x){
	switch(x){
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	8a 30       	cpi	r24, 0x0A	; 10
 2c8:	91 05       	cpc	r25, r1
 2ca:	60 f5       	brcc	.+88     	; 0x324 <set_character+0x60>
 2cc:	fc 01       	movw	r30, r24
 2ce:	ec 5c       	subi	r30, 0xCC	; 204
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__tablejump2__>
		/*****************Hexadecimal****************************************Binary****/
		case 0:  set_segment(0xEF);break;                                   // 1110 1011
 2d6:	8f ee       	ldi	r24, 0xEF	; 239
 2d8:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 2dc:	08 95       	ret
		case 1:  set_segment(0x2C);break;                                   // 0010 1000
 2de:	8c e2       	ldi	r24, 0x2C	; 44
 2e0:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 2e4:	08 95       	ret
		case 2:  set_segment(0xB7);break;                                   // 1011 0011
 2e6:	87 eb       	ldi	r24, 0xB7	; 183
 2e8:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 2ec:	08 95       	ret
		case 3:  set_segment(0xBE);break;                                   // 1011 1010
 2ee:	8e eb       	ldi	r24, 0xBE	; 190
 2f0:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 2f4:	08 95       	ret
		case 4:  set_segment(0x7C);break;                                   // 0111 1000
 2f6:	8c e7       	ldi	r24, 0x7C	; 124
 2f8:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 2fc:	08 95       	ret
		case 5:  set_segment(0xDE);break;                                   // 1101 1010
 2fe:	8e ed       	ldi	r24, 0xDE	; 222
 300:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 304:	08 95       	ret
		case 6:  set_segment(0xDF);break;                                   // 1101 1011
 306:	8f ed       	ldi	r24, 0xDF	; 223
 308:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 30c:	08 95       	ret
		case 7:  set_segment(0xAC);break;                                   // 1010 1000
 30e:	8c ea       	ldi	r24, 0xAC	; 172
 310:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 314:	08 95       	ret
		case 8:  set_segment(0xFF);break;                                   // 1111 1011
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 31c:	08 95       	ret
		case 9:  set_segment(0xFE);break;                                   // 1111 1010
 31e:	8e ef       	ldi	r24, 0xFE	; 254
 320:	0e 94 39 01 	call	0x272	; 0x272 <set_segment>
 324:	08 95       	ret

00000326 <set_digit>:
		
	}
}
/***************************************************************************************************************************************************/
void set_digit(char x){
	switch(x){
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	a9 f0       	breq	.+42     	; 0x354 <set_digit+0x2e>
 32a:	28 f4       	brcc	.+10     	; 0x336 <set_digit+0x10>
 32c:	88 23       	and	r24, r24
 32e:	41 f0       	breq	.+16     	; 0x340 <set_digit+0x1a>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	59 f0       	breq	.+22     	; 0x34a <set_digit+0x24>
 334:	08 95       	ret
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	91 f0       	breq	.+36     	; 0x35e <set_digit+0x38>
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	a9 f0       	breq	.+42     	; 0x368 <set_digit+0x42>
 33e:	08 95       	ret
		/**********************************************SET ALL COMMON CATHODE TO GROUND*************************************************************/
		case 0: GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 340:	2c 9a       	sbi	0x05, 4	; 5
 342:	29 9a       	sbi	0x05, 1	; 5
 344:	2a 9a       	sbi	0x05, 2	; 5
 346:	2b 9a       	sbi	0x05, 3	; 5
 348:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 1 TO GROUND********************************************************************/
		case 1: GROUND_PORT&=~(1<<DIGIT_1_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break; 
 34a:	29 98       	cbi	0x05, 1	; 5
 34c:	2c 9a       	sbi	0x05, 4	; 5
 34e:	2a 9a       	sbi	0x05, 2	; 5
 350:	2b 9a       	sbi	0x05, 3	; 5
 352:	08 95       	ret
		/*******************************************************************************************************************************************/  
		
		/**************************************************SET DIGIT 2 TO GROUND********************************************************************/
  		case 2: GROUND_PORT&=~(1<<DIGIT_2_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 354:	2a 98       	cbi	0x05, 2	; 5
 356:	2c 9a       	sbi	0x05, 4	; 5
 358:	29 9a       	sbi	0x05, 1	; 5
 35a:	2b 9a       	sbi	0x05, 3	; 5
 35c:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 3 TO GROUND********************************************************************/
		case 3: GROUND_PORT&=~(1<<DIGIT_3_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT);break;
 35e:	2b 98       	cbi	0x05, 3	; 5
 360:	2c 9a       	sbi	0x05, 4	; 5
 362:	29 9a       	sbi	0x05, 1	; 5
 364:	2a 9a       	sbi	0x05, 2	; 5
 366:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 4 TO GROUND********************************************************************/
		case 4: GROUND_PORT&=~(1<<DIGIT_4_BIT);  GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 368:	2c 98       	cbi	0x05, 4	; 5
 36a:	29 9a       	sbi	0x05, 1	; 5
 36c:	2a 9a       	sbi	0x05, 2	; 5
 36e:	2b 9a       	sbi	0x05, 3	; 5
 370:	08 95       	ret

00000372 <timer_init>:

volatile uint32_t timer_tacts_passed;
/****************************************************************************************************************************/
void timer_init()
{
	timer_tacts_passed = 0;
 372:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 376:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 37a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 37e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	TCCR0B	|= (1 << CS02) | (1 << CS00);   //prescaler 1024
 382:	85 b5       	in	r24, 0x25	; 37
 384:	85 60       	ori	r24, 0x05	; 5
 386:	85 bd       	out	0x25, r24	; 37
	TIFR0	|= ( 1<<TOV0 );
 388:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0	|= ( 1<<TOIE0 );
 38a:	ee e6       	ldi	r30, 0x6E	; 110
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	81 60       	ori	r24, 0x01	; 1
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <__vector_16>:
}
/****************************************************************************************************************************/
ISR(TIMER0_OVF_vect)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
	timer_tacts_passed++;
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3b2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 3b6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	a1 1d       	adc	r26, r1
 3be:	b1 1d       	adc	r27, r1
 3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3c8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 3cc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	if (timer_tacts_passed == UINT32_MAX)
 3d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3d8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 3dc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 3e0:	8f 3f       	cpi	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	af 4f       	sbci	r26, 0xFF	; 255
 3e6:	bf 4f       	sbci	r27, 0xFF	; 255
 3e8:	41 f4       	brne	.+16     	; 0x3fa <__vector_16+0x64>
	{
		timer_tacts_passed = 0;
 3ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 3f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	}
}
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <timer_reset_tacts>:
/****************************************************************************************************************************/
void timer_reset_tacts()
{
	timer_tacts_passed = 0;
 40e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 412:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 416:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 41a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 41e:	08 95       	ret

00000420 <timer_timeout>:
}
/****************************************************************************************************************************/
char timer_timeout( uint32_t seconds )
{
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	cf 93       	push	r28
 432:	4b 01       	movw	r8, r22
 434:	5c 01       	movw	r10, r24
	if( (float)timer_tacts_passed / (float)TIMER_TACTS_PER_SECOND >= (float)seconds ) return 1;
 436:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 43a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 43e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 442:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 446:	0e 94 b8 02 	call	0x570	; 0x570 <__floatunsisf>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	44 e7       	ldi	r20, 0x74	; 116
 450:	52 e4       	ldi	r21, 0x42	; 66
 452:	0e 94 46 02 	call	0x48c	; 0x48c <__divsf3>
 456:	6b 01       	movw	r12, r22
 458:	7c 01       	movw	r14, r24
 45a:	c5 01       	movw	r24, r10
 45c:	b4 01       	movw	r22, r8
 45e:	0e 94 b8 02 	call	0x570	; 0x570 <__floatunsisf>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	c1 e0       	ldi	r28, 0x01	; 1
 468:	c7 01       	movw	r24, r14
 46a:	b6 01       	movw	r22, r12
 46c:	0e 94 46 03 	call	0x68c	; 0x68c <__gesf2>
 470:	88 23       	and	r24, r24
 472:	0c f4       	brge	.+2      	; 0x476 <timer_timeout+0x56>
 474:	c0 e0       	ldi	r28, 0x00	; 0
	
	return 0;
}
 476:	8c 2f       	mov	r24, r28
 478:	cf 91       	pop	r28
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	9f 90       	pop	r9
 488:	8f 90       	pop	r8
 48a:	08 95       	ret

0000048c <__divsf3>:
 48c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__divsf3x>
 490:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 494:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 498:	58 f0       	brcs	.+22     	; 0x4b0 <__divsf3+0x24>
 49a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 49e:	40 f0       	brcs	.+16     	; 0x4b0 <__divsf3+0x24>
 4a0:	29 f4       	brne	.+10     	; 0x4ac <__divsf3+0x20>
 4a2:	5f 3f       	cpi	r21, 0xFF	; 255
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <__divsf3+0x24>
 4a6:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 4aa:	51 11       	cpse	r21, r1
 4ac:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>
 4b0:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>

000004b4 <__divsf3x>:
 4b4:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_split3>
 4b8:	68 f3       	brcs	.-38     	; 0x494 <__divsf3+0x8>

000004ba <__divsf3_pse>:
 4ba:	99 23       	and	r25, r25
 4bc:	b1 f3       	breq	.-20     	; 0x4aa <__divsf3+0x1e>
 4be:	55 23       	and	r21, r21
 4c0:	91 f3       	breq	.-28     	; 0x4a6 <__divsf3+0x1a>
 4c2:	95 1b       	sub	r25, r21
 4c4:	55 0b       	sbc	r21, r21
 4c6:	bb 27       	eor	r27, r27
 4c8:	aa 27       	eor	r26, r26
 4ca:	62 17       	cp	r22, r18
 4cc:	73 07       	cpc	r23, r19
 4ce:	84 07       	cpc	r24, r20
 4d0:	38 f0       	brcs	.+14     	; 0x4e0 <__divsf3_pse+0x26>
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	5f 4f       	sbci	r21, 0xFF	; 255
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	44 1f       	adc	r20, r20
 4dc:	aa 1f       	adc	r26, r26
 4de:	a9 f3       	breq	.-22     	; 0x4ca <__divsf3_pse+0x10>
 4e0:	35 d0       	rcall	.+106    	; 0x54c <__divsf3_pse+0x92>
 4e2:	0e 2e       	mov	r0, r30
 4e4:	3a f0       	brmi	.+14     	; 0x4f4 <__divsf3_pse+0x3a>
 4e6:	e0 e8       	ldi	r30, 0x80	; 128
 4e8:	32 d0       	rcall	.+100    	; 0x54e <__divsf3_pse+0x94>
 4ea:	91 50       	subi	r25, 0x01	; 1
 4ec:	50 40       	sbci	r21, 0x00	; 0
 4ee:	e6 95       	lsr	r30
 4f0:	00 1c       	adc	r0, r0
 4f2:	ca f7       	brpl	.-14     	; 0x4e6 <__divsf3_pse+0x2c>
 4f4:	2b d0       	rcall	.+86     	; 0x54c <__divsf3_pse+0x92>
 4f6:	fe 2f       	mov	r31, r30
 4f8:	29 d0       	rcall	.+82     	; 0x54c <__divsf3_pse+0x92>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	bb 1f       	adc	r27, r27
 502:	26 17       	cp	r18, r22
 504:	37 07       	cpc	r19, r23
 506:	48 07       	cpc	r20, r24
 508:	ab 07       	cpc	r26, r27
 50a:	b0 e8       	ldi	r27, 0x80	; 128
 50c:	09 f0       	breq	.+2      	; 0x510 <__divsf3_pse+0x56>
 50e:	bb 0b       	sbc	r27, r27
 510:	80 2d       	mov	r24, r0
 512:	bf 01       	movw	r22, r30
 514:	ff 27       	eor	r31, r31
 516:	93 58       	subi	r25, 0x83	; 131
 518:	5f 4f       	sbci	r21, 0xFF	; 255
 51a:	3a f0       	brmi	.+14     	; 0x52a <__divsf3_pse+0x70>
 51c:	9e 3f       	cpi	r25, 0xFE	; 254
 51e:	51 05       	cpc	r21, r1
 520:	78 f0       	brcs	.+30     	; 0x540 <__divsf3_pse+0x86>
 522:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 526:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>
 52a:	5f 3f       	cpi	r21, 0xFF	; 255
 52c:	e4 f3       	brlt	.-8      	; 0x526 <__divsf3_pse+0x6c>
 52e:	98 3e       	cpi	r25, 0xE8	; 232
 530:	d4 f3       	brlt	.-12     	; 0x526 <__divsf3_pse+0x6c>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	9f 5f       	subi	r25, 0xFF	; 255
 53e:	c9 f7       	brne	.-14     	; 0x532 <__divsf3_pse+0x78>
 540:	88 0f       	add	r24, r24
 542:	91 1d       	adc	r25, r1
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	97 f9       	bld	r25, 7
 54a:	08 95       	ret
 54c:	e1 e0       	ldi	r30, 0x01	; 1
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	bb 1f       	adc	r27, r27
 556:	62 17       	cp	r22, r18
 558:	73 07       	cpc	r23, r19
 55a:	84 07       	cpc	r24, r20
 55c:	ba 07       	cpc	r27, r26
 55e:	20 f0       	brcs	.+8      	; 0x568 <__divsf3_pse+0xae>
 560:	62 1b       	sub	r22, r18
 562:	73 0b       	sbc	r23, r19
 564:	84 0b       	sbc	r24, r20
 566:	ba 0b       	sbc	r27, r26
 568:	ee 1f       	adc	r30, r30
 56a:	88 f7       	brcc	.-30     	; 0x54e <__divsf3_pse+0x94>
 56c:	e0 95       	com	r30
 56e:	08 95       	ret

00000570 <__floatunsisf>:
 570:	e8 94       	clt
 572:	09 c0       	rjmp	.+18     	; 0x586 <__floatsisf+0x12>

00000574 <__floatsisf>:
 574:	97 fb       	bst	r25, 7
 576:	3e f4       	brtc	.+14     	; 0x586 <__floatsisf+0x12>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	99 23       	and	r25, r25
 588:	a9 f0       	breq	.+42     	; 0x5b4 <__floatsisf+0x40>
 58a:	f9 2f       	mov	r31, r25
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	bb 27       	eor	r27, r27
 590:	93 95       	inc	r25
 592:	f6 95       	lsr	r31
 594:	87 95       	ror	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f1 11       	cpse	r31, r1
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <__floatsisf+0x1c>
 5a0:	fa f4       	brpl	.+62     	; 0x5e0 <__floatsisf+0x6c>
 5a2:	bb 0f       	add	r27, r27
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__floatsisf+0x36>
 5a6:	60 ff       	sbrs	r22, 0
 5a8:	1b c0       	rjmp	.+54     	; 0x5e0 <__floatsisf+0x6c>
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <__floatsisf+0x6c>
 5b4:	88 23       	and	r24, r24
 5b6:	11 f0       	breq	.+4      	; 0x5bc <__floatsisf+0x48>
 5b8:	96 e9       	ldi	r25, 0x96	; 150
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <__floatsisf+0x6a>
 5bc:	77 23       	and	r23, r23
 5be:	21 f0       	breq	.+8      	; 0x5c8 <__floatsisf+0x54>
 5c0:	9e e8       	ldi	r25, 0x8E	; 142
 5c2:	87 2f       	mov	r24, r23
 5c4:	76 2f       	mov	r23, r22
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__floatsisf+0x5e>
 5c8:	66 23       	and	r22, r22
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <__floatsisf+0x74>
 5cc:	96 e8       	ldi	r25, 0x86	; 134
 5ce:	86 2f       	mov	r24, r22
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	2a f0       	brmi	.+10     	; 0x5e0 <__floatsisf+0x6c>
 5d6:	9a 95       	dec	r25
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	da f7       	brpl	.-10     	; 0x5d6 <__floatsisf+0x62>
 5e0:	88 0f       	add	r24, r24
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret

000005ea <__fp_inf>:
 5ea:	97 f9       	bld	r25, 7
 5ec:	9f 67       	ori	r25, 0x7F	; 127
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <__fp_nan>:
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	08 95       	ret

000005fc <__fp_pscA>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	09 06       	cpc	r0, r25
 608:	08 95       	ret

0000060a <__fp_pscB>:
 60a:	00 24       	eor	r0, r0
 60c:	0a 94       	dec	r0
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	05 06       	cpc	r0, r21
 616:	08 95       	ret

00000618 <__fp_round>:
 618:	09 2e       	mov	r0, r25
 61a:	03 94       	inc	r0
 61c:	00 0c       	add	r0, r0
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0xc>
 620:	88 23       	and	r24, r24
 622:	52 f0       	brmi	.+20     	; 0x638 <__fp_round+0x20>
 624:	bb 0f       	add	r27, r27
 626:	40 f4       	brcc	.+16     	; 0x638 <__fp_round+0x20>
 628:	bf 2b       	or	r27, r31
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0x18>
 62c:	60 ff       	sbrs	r22, 0
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__fp_round+0x20>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__fp_split3>:
 63a:	57 fd       	sbrc	r21, 7
 63c:	90 58       	subi	r25, 0x80	; 128
 63e:	44 0f       	add	r20, r20
 640:	55 1f       	adc	r21, r21
 642:	59 f0       	breq	.+22     	; 0x65a <__fp_splitA+0x10>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	71 f0       	breq	.+28     	; 0x664 <__fp_splitA+0x1a>
 648:	47 95       	ror	r20

0000064a <__fp_splitA>:
 64a:	88 0f       	add	r24, r24
 64c:	97 fb       	bst	r25, 7
 64e:	99 1f       	adc	r25, r25
 650:	61 f0       	breq	.+24     	; 0x66a <__fp_splitA+0x20>
 652:	9f 3f       	cpi	r25, 0xFF	; 255
 654:	79 f0       	breq	.+30     	; 0x674 <__fp_splitA+0x2a>
 656:	87 95       	ror	r24
 658:	08 95       	ret
 65a:	12 16       	cp	r1, r18
 65c:	13 06       	cpc	r1, r19
 65e:	14 06       	cpc	r1, r20
 660:	55 1f       	adc	r21, r21
 662:	f2 cf       	rjmp	.-28     	; 0x648 <__fp_split3+0xe>
 664:	46 95       	lsr	r20
 666:	f1 df       	rcall	.-30     	; 0x64a <__fp_splitA>
 668:	08 c0       	rjmp	.+16     	; 0x67a <__fp_splitA+0x30>
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	18 06       	cpc	r1, r24
 670:	99 1f       	adc	r25, r25
 672:	f1 cf       	rjmp	.-30     	; 0x656 <__fp_splitA+0xc>
 674:	86 95       	lsr	r24
 676:	71 05       	cpc	r23, r1
 678:	61 05       	cpc	r22, r1
 67a:	08 94       	sec
 67c:	08 95       	ret

0000067e <__fp_zero>:
 67e:	e8 94       	clt

00000680 <__fp_szero>:
 680:	bb 27       	eor	r27, r27
 682:	66 27       	eor	r22, r22
 684:	77 27       	eor	r23, r23
 686:	cb 01       	movw	r24, r22
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__gesf2>:
 68c:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_cmp>
 690:	08 f4       	brcc	.+2      	; 0x694 <__gesf2+0x8>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	08 95       	ret

00000696 <__fp_cmp>:
 696:	99 0f       	add	r25, r25
 698:	00 08       	sbc	r0, r0
 69a:	55 0f       	add	r21, r21
 69c:	aa 0b       	sbc	r26, r26
 69e:	e0 e8       	ldi	r30, 0x80	; 128
 6a0:	fe ef       	ldi	r31, 0xFE	; 254
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	e8 07       	cpc	r30, r24
 6a8:	f9 07       	cpc	r31, r25
 6aa:	c0 f0       	brcs	.+48     	; 0x6dc <__fp_cmp+0x46>
 6ac:	12 16       	cp	r1, r18
 6ae:	13 06       	cpc	r1, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	98 f0       	brcs	.+38     	; 0x6dc <__fp_cmp+0x46>
 6b6:	62 1b       	sub	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	95 0b       	sbc	r25, r21
 6be:	39 f4       	brne	.+14     	; 0x6ce <__fp_cmp+0x38>
 6c0:	0a 26       	eor	r0, r26
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_cmp+0x46>
 6c4:	23 2b       	or	r18, r19
 6c6:	24 2b       	or	r18, r20
 6c8:	25 2b       	or	r18, r21
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <__fp_cmp+0x3e>
 6cc:	08 95       	ret
 6ce:	0a 26       	eor	r0, r26
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <__fp_cmp+0x3e>
 6d2:	a1 40       	sbci	r26, 0x01	; 1
 6d4:	a6 95       	lsr	r26
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	81 1d       	adc	r24, r1
 6da:	81 1d       	adc	r24, r1
 6dc:	08 95       	ret

000006de <__tablejump2__>:
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	05 90       	lpm	r0, Z+
 6e4:	f4 91       	lpm	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	09 94       	ijmp

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
